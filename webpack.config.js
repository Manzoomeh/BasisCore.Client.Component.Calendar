const path = require("path");
const trustHttpServer = require("./server/server");
const ticketingHttpServer = require("./server/ticketing");
const CircularDependencyPlugin = require("circular-dependency-plugin");
const crypto = require("crypto");
const crypto_orig_createHash = crypto.createHash;
crypto.createHash = algorithm => crypto_orig_createHash(algorithm == "md4" ? "sha256" : algorithm);


module.exports = {
  entry: {

    calendar: {
      import: "./src/loader.ts",
      filename: "basiscore.calendar.js",
      library: {
        name: "[name]",
        type: "assign",
      },
    },
    'calendar-component': {
      import: "./src/BcComponentLoader.ts",
      filename: "basiscore.calendar.component.js",
      library: {
        name: "calendar",
        type: "assign",
      },
    },

    
  },
  devtool: "source-map",
  output: {
    filename: "[name].js",
  },
  devServer: {
    static: [
      {
        directory: path.resolve(__dirname, "wwwroot"),
      },
      {
        directory: path.resolve(__dirname, "node_modules/alasql/dist"),
      },
      {
        directory: path.resolve(__dirname, "node_modules/bclib/dist"),
      },
    ],
    onBeforeSetupMiddleware: function (server) {      
      server.app.use("/", trustHttpServer);
    },
    open: true,
    port: 3001,
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: ["ts-loader"],
        exclude: /\.d\.ts$/,
      },
      {
        test: /\.d\.ts$/,
        use: ["ignore-loader"],
      },
      {
        test: /\.css$/,
        use: ["style-loader","css-loader"],
      },
      {
        test: /\.png$/i,
        type: "asset/inline",
      },
      {
        test: /\.svg$/i,
        type: "asset/inline",
      },
      {
        test: /\.html$/i,
        type: "asset/source",
      },
      {
        test: /\.csss$/i,
        type: "asset/source",
      }
    ],
  },

  resolve: {
    extensions: [".ts", ".d.ts", ".tsx", ".js", ".jsx", ".css",".html"],
  },
  plugins: [
    new CircularDependencyPlugin({
      // `onStart` is called before the cycle detection starts
      onStart({ compilation }) {
        console.log("start detecting webpack modules cycles");
      },
      // `onDetected` is called for each module that is cyclical
      onDetected({ module: webpackModuleRecord, paths, compilation }) {
        // `paths` will be an Array of the relative module paths that make up the cycle
        // `module` will be the module record generated by webpack that caused the cycle
        compilation.errors.push(new Error(paths.join(" -> ")));
      },
      // `onEnd` is called before the cycle detection ends
      onEnd({ compilation }) {
        console.log("end detecting webpack modules cycles");
      },
    })
  ],
};
