const path = require("path");
const trustHttpServer = require("./server/trust-login");
const ticketingHttpServer = require("./server/ticketing");
const CircularDependencyPlugin = require("circular-dependency-plugin");

module.exports = {
  entry: {

    calendar: {
      import: "./src/loader.ts",
      filename: "basiscore.calendar.js",
      library: {
        name: "[name]",
        type: "assign",
      },
    },
    calendarComponent: {
      import: "./src/BcComponentLoader.ts",
      filename: "basiscore.calendar.component.js",
      library: {
        name: "bc",
        type: "assign",
      },
    },
    datePicker: {
      import: "./src/datePickerLoader.ts",
      filename: "basiscore.datePicker.js",
      library: {
        name: "[name]",
        type: "assign",
      },
    },
    datePickerComponent: {
      import: "./src/BcComponentDatePickerLoader.ts",
      filename: "basiscore.datepicker.component.js",
      library: {
        name: "bc",
        type: "assign",
      },
    },
  },
  devtool: "source-map",
  output: {
    filename: "[name].js",
  },
  devServer: {
    static: path.resolve(__dirname, "wwwroot"),
    onBeforeSetupMiddleware: function (server) {      
      server.app.use("/trustlogin", trustHttpServer);
      server.app.use("/ticketing", ticketingHttpServer);
    },
    open: true,
    port: 3001,
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: ["ts-loader"],
        exclude: /\.d\.ts$/,
      },
      {
        test: /\.d\.ts$/,
        use: ["ignore-loader"],
      },
      {
        test: /\.css$/,
        use: ["style-loader","css-loader"],
      }
    ],
  },
  resolve: {
    extensions: [".ts", ".d.ts", ".tsx", ".js", ".jsx", ".css"],
  },
  plugins: [
    new CircularDependencyPlugin({
      // `onStart` is called before the cycle detection starts
      onStart({ compilation }) {
        console.log("start detecting webpack modules cycles");
      },
      // `onDetected` is called for each module that is cyclical
      onDetected({ module: webpackModuleRecord, paths, compilation }) {
        // `paths` will be an Array of the relative module paths that make up the cycle
        // `module` will be the module record generated by webpack that caused the cycle
        compilation.errors.push(new Error(paths.join(" -> ")));
      },
      // `onEnd` is called before the cycle detection ends
      onEnd({ compilation }) {
        console.log("end detecting webpack modules cycles");
      },
    })
  ],
};
